{"version":3,"sources":["images/dahlia.jpg","components/Header/Header.js","components/Square/Square.js","components/Board/Board.js","components/Radio/Radio.js","components/GameButton/GameButton.js","components/Footer/Footer.js","Game.js","utils/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","Square","props","className","style","onClick","value","Board","renderSquare","i","gameMode","components_Square_Square","squares","style1","style2","Radio","type","name","onChange","defaultChecked","GameButton","message","Footer","href","target","rel","Game","button","background","backgroundImage","concat","Dahlia","color","backgroundSize","backgroundPosition","messageArray","buttonArray","styles","_useState","useState","_useState2","Object","slicedToArray","boardSquaresArr","setBoardSquaresArr","_useState3","_useState4","move","setMove","_useState5","_useState6","time","setTime","_useState7","_useState8","gameComplete","setGameComplete","_useState9","_useState10","setGameMode","_useState11","_useState12","clockRunning","setClockRunning","_useState13","_useState14","intervalId","setIntervalId","stopTimer","clearInterval","count","timeCount","handleClick1","boardSquares","anArray","anArrayLength","length","rootLength","Math","pow","shuffledArray","numberArray","evenSet","oddSet","j","push","blankSquare","indexOf","swapSquare","_ref","includes","floor","random","shuffleArray","setInterval","convertedTime","t","minutes","seconds","timeConverter","gameArray","components_Header_Header","components_Board_Board","array1","array2","slice","newSquares","lastSquare","first","second","map","x","check","JSON","stringify","every","element","index","handleClick2","id","components_GameButton_GameButton","components_Radio_Radio","event","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_Game_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f88106e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dahlia.72570664.jpg\";","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => (\n  <header>\n    <div>\n      <h1>Slider Game</h1>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./Square.css\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" style={props.style} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nexport default Square;\n","import React from \"react\";\nimport \"./Board.css\";\nimport Square from \"../Square\";\n\nconst Board = props => {\n  const renderSquare = i => {\n    if (props.gameMode === \"Numbers\") {\n      return (\n        <Square\n          value={props.squares[i].value}\n          style={props.squares[i].style1}\n          onClick={() => props.onClick(i)}\n        />\n      );\n    } else {\n      return (\n        <Square\n          value={props.squares[i].value}\n          style={props.squares[i].style2}\n          onClick={() => props.onClick(i)}\n        />\n      );\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"board\">\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n          {renderSquare(3)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(4)}\n          {renderSquare(5)}\n          {renderSquare(6)}\n          {renderSquare(7)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(8)}\n          {renderSquare(9)}\n          {renderSquare(10)}\n          {renderSquare(11)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(12)}\n          {renderSquare(13)}\n          {renderSquare(14)}\n          {renderSquare(15)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport \"./Radio.css\";\n\nfunction Radio(props) {\n  return (\n    <div className=\"radio-form-div\">\n      <div className=\"game-mode-div\">Game Mode: {props.gameMode}</div>\n      <form className=\"radio-form\">\n        <div className=\"radiobox\">\n          <label className=\"radio-container\">\n            Numbers\n            <input\n              type=\"radio\"\n              name=\"radio\"\n              value=\"Numbers\"\n              onChange={props.onChange}\n              defaultChecked\n            />\n            <span className=\"checkmark\" />\n          </label>\n        </div>\n        <div className=\"radiobox\">\n          <label className=\"radio-container\">\n            Picture\n            <input\n              type=\"radio\"\n              name=\"radio\"\n              value=\"Picture\"\n              onChange={props.onChange}\n            />\n            <span className=\"checkmark\" />\n          </label>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Radio;\n","import React from \"react\";\nimport \"./GameButton.css\";\n\nfunction GameButton(props) {\n  return (\n    <button className=\"game-button\" style={props.style} onClick={props.onClick}>\n      {props.message}\n    </button>\n  );\n}\n\nexport default GameButton;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <footer>\n    <div>{`© 2018 Patrick Kearney`}</div>\n    <div className=\"soc-media-div\">\n      <a\n        className=\"soc-media-links hvr-grow\"\n        href=\"https://www.linkedin.com/in/patrickckearney/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-linkedin\" />\n      </a>\n      <a\n        className=\"soc-media-links hvr-grow\"\n        href=\"https://github.com/pckearney25\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-github-square\" />\n      </a>\n      <a\n        className=\"soc-media-links hvr-grow\"\n        href=\"https://stackoverflow.com/users/9205863/pckearney\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-stack-overflow\" />\n      </a>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Board from \"./components/Board\";\nimport Radio from \"./components/Radio\";\nimport GameButton from \"./components/GameButton\";\nimport Footer from \"./components/Footer\";\nimport Dahlia from \"./images/dahlia.jpg\";\nimport { shuffleArray, arrayValuesEqual, timeConverter } from \"./utils\";\nimport \"./Game.css\";\n\nconst Game = () => {\n  //Game constants\n  const squares = [\n    {\n      value: 1,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"400% 400%\"\n      }\n    },\n    {\n      value: 2,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"300% 400%\"\n      }\n    },\n    {\n      value: 3,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"200% 400%\"\n      }\n    },\n    {\n      value: 4,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"100% 400%\"\n      }\n    },\n    {\n      value: 5,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"400% 300%\"\n      }\n    },\n    {\n      value: 6,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"300% 300%\"\n      }\n    },\n    {\n      value: 7,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"200% 300%\"\n      }\n    },\n    {\n      value: 8,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"100% 300%\"\n      }\n    },\n    {\n      value: 9,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"400% 200%\"\n      }\n    },\n    {\n      value: 10,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"300% 200%\"\n      }\n    },\n    {\n      value: 11,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"200% 200%\"\n      }\n    },\n    {\n      value: 12,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"100% 200%\"\n      }\n    },\n    {\n      value: 13,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"400% 100%\"\n      }\n    },\n    {\n      value: 14,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"300% 100%\"\n      }\n    },\n    {\n      value: 15,\n      style1: { background: \"white\" },\n      style2: {\n        backgroundImage: `url(${Dahlia})`,\n        color: \"#00000000\",\n        backgroundSize: \"400% 400%\",\n        backgroundPosition: \"200% 100%\"\n      }\n    },\n    {\n      value: 16,\n      style1: { background: \"black\" },\n      style2: { background: \"black\" }\n    }\n  ];\n  const messageArray = [\n    \"Order the squares as shown. Click button to start game.\",\n    \"Click an ajacent square to move into the empty position.\",\n    \"Game Complete! Click button to play again.\"\n  ];\n  const buttonArray = [\n    {\n      message: \"Start Game\",\n      styles: { color: \"#FFC013\", background: \"#2c0b9e\" }\n    },\n    {\n      message: \"Reset Game\",\n      styles: { color: \"#1A065F\", background: \"#FFBB00\" }\n    },\n    {\n      message: \"Play Again\",\n      styles: { color: \"#FFC013\", background: \"#2c0b9e\" }\n    }\n  ];\n\n  // Varibles to set game message and button styles/content in the game box.\n  let message;\n  let button;\n\n  //Game Timer Variables\n\n  //State Variables\n  let [boardSquaresArr, setBoardSquaresArr] = useState([]);\n  let [move, setMove] = useState(0);\n  let [time, setTime] = useState(0);\n  let [gameComplete, setGameComplete] = useState(false);\n  let [gameMode, setGameMode] = useState(\"Numbers\");\n  let [clockRunning, setClockRunning] = useState(false);\n  let [intervalId, setIntervalId] = useState();\n\n  //Game Functions\n\n  const startTimer = () => {\n    if (!clockRunning) {\n      setIntervalId((intervalId = setInterval(count, 1000)));\n      setClockRunning((clockRunning = true));\n    }\n  };\n\n  const stopTimer = () => {\n    setIntervalId(clearInterval(intervalId));\n    setTime((time = 0));\n    setClockRunning((clockRunning = false));\n  };\n\n  const count = () => {\n    let timeCount = time;\n    timeCount++;\n    setTime((time = timeCount));\n  };\n\n  const resetTimer = () => {\n    setTime((time = 0));\n  };\n\n  const handleClick1 = () => {\n    //let move = this.state.move;\n    if (move === 0) {\n      const boardSquares = shuffleArray(squares);\n      setBoardSquaresArr((boardSquaresArr = boardSquares));\n      setMove(move + 1);\n      setGameComplete(false);\n      startTimer();\n    } else {\n      setMove((move = 0));\n      setTime((time = 0));\n      stopTimer();\n      resetTimer();\n    }\n  };\n\n  const handleClick2 = i => {\n    let boardSquares = boardSquaresArr.slice();\n    let newSquares = boardSquaresArr.slice();\n    //lastSquare position in the array holds the position value of the \"blank\" square\n    let lastSquare = boardSquares.length;\n    const checkArray = boardSquares.map(x => x.value);\n    const first = i;\n    const second = checkArray.indexOf(lastSquare);\n    const check = JSON.stringify([first, second]);\n    //would like to generalize this as well eventually.\n    //for a 4X4 array these are the allowed square swaps\n    const adjacentArray = [\n      \"[0,1]\",\n      \"[0,4]\",\n      \"[1,0]\",\n      \"[1,2]\",\n      \"[1,5]\",\n      \"[2,1]\",\n      \"[2,3]\",\n      \"[2,6]\",\n      \"[3,2]\",\n      \"[3,7]\",\n      \"[4,0]\",\n      \"[4,5]\",\n      \"[4,8]\",\n      \"[4,7]\",\n      \"[5,1]\",\n      \"[5,4]\",\n      \"[5,6]\",\n      \"[5,9]\",\n      \"[6,2]\",\n      \"[6,5]\",\n      \"[6,7]\",\n      \"[6,10]\",\n      \"[7,3]\",\n      \"[7,6]\",\n      \"[7,11]\",\n      \"[8,4]\",\n      \"[8,9]\",\n      \"[8,12]\",\n      \"[9,5]\",\n      \"[9,8]\",\n      \"[9,10]\",\n      \"[9,13]\",\n      \"[10,6]\",\n      \"[10,9]\",\n      \"[10,11]\",\n      \"[10,14]\",\n      \"[11,7]\",\n      \"[11,10]\",\n      \"[11,15]\",\n      \"[12,8]\",\n      \"[12,13]\",\n      \"[13,9]\",\n      \"[13,12]\",\n      \"[13,14]\",\n      \"[14,10]\",\n      \"[14,13]\",\n      \"[14,15]\",\n      \"[15,11]\",\n      \"[15,14]\"\n    ];\n\n    if (move !== 0 && adjacentArray.indexOf(check) !== -1) {\n      newSquares[first] = boardSquares[second];\n      newSquares[second] = boardSquares[first];\n      if (arrayValuesEqual(newSquares, squares)) {\n        setGameComplete((gameComplete = true));\n        stopTimer();\n      }\n      setMove(move + 1);\n      setBoardSquaresArr((boardSquaresArr = newSquares));\n    }\n  };\n\n  const handleInputChange = event => {\n    // Getting the value of the input which triggered the change\n    const { value } = event.target;\n    setGameMode((gameMode = value));\n  };\n\n  //SETTING THE GAME FOR DISPLAY\n\n  //This formats the time information to be displayed.\n  const convertedTime = timeConverter(time);\n\n  if (move === 0) {\n    button = buttonArray[0];\n    message = messageArray[0];\n  }\n\n  if (move !== 0 && !gameComplete) {\n    button = buttonArray[1];\n    message = messageArray[1];\n  }\n\n  if (move !== 0 && gameComplete) {\n    button = buttonArray[2];\n    message = messageArray[2];\n  }\n\n  //this sets the array information that is passed into the game.\n  //New game gets squares, a game in progress boardSquaresArr\n  const gameArray = move > 0 ? boardSquaresArr : squares;\n\n  return (\n    <div className=\"Game\">\n      <div className=\"content\">\n        <Header />\n\n        <div className=\"game-container\">\n          <div className=\"game-box\">\n            <Board\n              squares={gameArray}\n              gameMode={gameMode}\n              onClick={i => handleClick2(i)}\n            />\n          </div>\n\n          <div className=\"game-box\">\n            <div id=\"message-div\">{message}</div>\n            <div id=\"timer-div\">\n              <span id=\"timer\">{`Timer: `}</span>\n              <span id=\"converted-time\">{convertedTime}</span>\n              <span>{` (mm:ss)`}</span>\n            </div>\n            <GameButton\n              style={button.styles}\n              onClick={() => {\n                handleClick1();\n              }}\n              message={button.message}\n            />\n            <Radio gameMode={gameMode} onChange={handleInputChange} />\n          </div>\n        </div>\n      </div>\n      <Footer className=\"footer\" />\n    </div>\n  );\n};\n\nexport default Game;\n","//The shuffleArray function will work with any square board.\nexport const shuffleArray = anArray => {\n  const anArrayLength = anArray.length;\n  const rootLength = Math.pow(anArrayLength, 0.5);\n  let shuffledArray = [];\n\n  //First create an array of numbers to shuffle\n  //AND TWO ARRAYS corresponding to an evenSet and and oddSet\n  // evenSet if row value i + column value j is even\n  // oddSet if row value i + column value j is odd\n  let numberArray = [];\n  let evenSet = [];\n  let oddSet = [];\n  let count = 0;\n\n  for (let i = 0; i < rootLength; i++) {\n    for (let j = 0; j < rootLength; j++) {\n      numberArray.push(count);\n      if ((i + j) % 2 === 0) {\n        evenSet.push(count);\n      } else {\n        oddSet.push(count);\n      }\n      count++;\n    }\n  }\n  // Next swap the numbers in the numberArray we created.\n  //the swaps MUST involve the position value of the last square in the input array (anArray)\n  for (let i = 0; i < Math.pow(numberArray.length, 2); i++) {\n    let blankSquare = numberArray.indexOf(anArrayLength - 1);\n    let swapSquare;\n\n    if (evenSet.includes(blankSquare)) {\n      //the swapSquare must be in the oddSet!\n      swapSquare = oddSet[Math.floor(Math.random() * oddSet.length)];\n    } else {\n      //the swapSquare must be in the evenSet!\n      swapSquare = evenSet[Math.floor(Math.random() * evenSet.length)];\n    }\n    [numberArray[blankSquare], numberArray[swapSquare]] = [\n      numberArray[swapSquare],\n      numberArray[blankSquare]\n    ];\n  }\n  //Finally populate the shuffledArray.\n  for (let i = 0; i < anArrayLength; i++) {\n    shuffledArray.push(anArray[numberArray[i]]);\n  }\n  return shuffledArray;\n};\n\nexport const arrayValuesEqual = (array1, array2) => {\n  if (\n    array1.length === array2.length &&\n    array1.every(function(element, index) {\n      return element.value === array2[index].value;\n    })\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const timeConverter = t => {\n  let minutes = Math.floor(t / 60);\n  let seconds = t - minutes * 60;\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  if (minutes === 0) {\n    minutes = \"00\";\n  } else if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  return minutes + \":\" + seconds;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}